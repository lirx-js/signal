// export type IWatchArguments<GValues extends readonly any[]> = [
//   ...{
//     [GKey in keyof GValues]: IReadonlySignal<GValues[GKey]>;
//   },
//   onChange: (...values: GValues) => IUnsubscribe | void,
// ];
//
// export function watch<GValues extends readonly any[]>(...args: IWatchArguments<GValues>) {
//   const signals: readonly IReadonlySignal<any>[] = args.slice(
//     0,
//     -1,
//   ) as readonly IReadonlySignal<any>[];
//   const onChange: (...values: any[]) => IUnsubscribe | void = args.at(-1) as any;
//
//   return effect((onCleanUp: IOnCleanUpFunction): void => {
//     const values: any[] = signals.map((signal: IReadonlySignal<any>): any => signal());
//     untracked((): void => {
//       const unsubscribe: IUnsubscribe | void = onChange(...values);
//       if (unsubscribe !== undefined) {
//         onCleanUp(unsubscribe);
//       }
//     });
//   });
// }
//
// watch(signal(6), signal('a'), (a: number, b: string) => {});
